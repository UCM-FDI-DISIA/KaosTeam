#include "ExploitableComponent.h"
#include "MovementComponentBomb.h"
#include "../scenes/RoomScene.h"

ExploitableComponent::ExploitableComponent() : Component(), /*coll(nullptr)*/ animator(nullptr), explosionTime(2000) {
	timerForDelete.pause();
}

ExploitableComponent::~ExploitableComponent() {
	//coll = nullptr;
	animator = nullptr;
}

void ExploitableComponent::exploitEntity() {
	animator->stopAnimation(); //Paramos animacion actual
	animator->removeAnimations(); //Quitamos animaciones existentes
	animator->playAnimation("DEATH");
	timerForDelete.resume();
}

void ExploitableComponent::initComponent() {
	//coll = static_cast<ColliderComponent*>(ent->getComponent(COLLIDER_COMPONENT));
	//Añadimos callback para que el objeto pueda ser destruido con bombas
	//coll->GetTransofmCollider()->AddCall([this](Entity* e, Collider c) {checkCollisionsWithBombs(e, c); });
	animator = static_cast<AnimationComponent*>(ent->getComponent(ANIMATION_COMPONENT));
}

void ExploitableComponent::update() {
	if (timerForDelete.currTime() >= explosionTime) {
		ent->getScene()->removeEntity(this->ent); //Quitamos la entidad una vez haya explotado
	}
}

//void ExploitableComponent::checkCollisionsWithBombs(Entity* e, Collider c) {
//	if (e->getName() == BOMB_ENTITY) {
//		//Como si o si tiene que colisionar con la bomba, explotamos la bomba aquí
//		MovementComponentBomb* moveBomb = static_cast<MovementComponentBomb*>(e->getComponent(MOVEMENT_COMPONENT));
//		moveBomb->explodeBomb();
//		ent->getScene()->removeEntity(this->ent); //Removemos este objeto
//	}
//}